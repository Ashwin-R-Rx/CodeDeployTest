name: Create SQS via terraform and Github Actions

on:
  push:
    branches:
      - main

jobs:
  # Job to check/create SQS queue and send a message
  github-actions-sqs-create-and-send-message:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Check if the SQS Queue exists
      - name: Check if SQS Queue exists
        id: check_queue
        run: |
          QUEUE_NAME="GitHubActionsQueue"
    
          # Try to get the Queue URL and handle any errors
          QUEUE_URL=$(aws sqs get-queue-url --queue-name $QUEUE_NAME --query 'QueueUrl' --output text 2>/tmp/aws_error.log) || true
    
          # Check if the Queue URL is empty (i.e., it doesn't exist)
          if [[ "$QUEUE_URL" == "None" || -z "$QUEUE_URL" ]]; then
            echo "Queue does not exist. Creating it."
            echo "CREATE_QUEUE=true" >> $GITHUB_ENV
          else
            echo "Queue exists at $QUEUE_URL"
            echo "CREATE_QUEUE=false" >> $GITHUB_ENV
          fi

      # Step 4: Create SQS Queue if not found
      - name: Create SQS Queue if not found
        if: env.CREATE_QUEUE == 'true'
        run: |
          QUEUE_NAME="GitHubActionsQueue"
          QUEUE_URL=$(aws sqs create-queue --queue-name $QUEUE_NAME --query 'QueueUrl' --output text)
          echo "Queue created at $QUEUE_URL"
          echo "QUEUE_URL=$QUEUE_URL" >> $GITHUB_ENV

      # Step 5: Send message to the SQS Queue
      - name: Send Message to SQS Queue
        run: |
          MESSAGE_BODY="Message from GitHub Actions!"
          QUEUE_NAME="GitHubActionsQueue"
          QUEUE_URL=$(aws sqs get-queue-url --queue-name $QUEUE_NAME --query 'QueueUrl' --output text)
          aws sqs send-message --queue-url $QUEUE_URL --message-body "$MESSAGE_BODY"
          echo "Message sent to the queue successfully."

  # Separate job to run Terraform for managing resources
  terraform-apply-sqs:
    runs-on: ubuntu-latest
    needs: github-actions-sqs-create-and-send-message  # This makes sure the SQS job runs first

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'  # Use the desired Terraform version

      # Step 3: Set AWS credentials for Terraform
      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # Step 4: Change directory to where Terraform files are located
      - name: Change directory to terraform folder
        run: cd terraform  # Assuming your Terraform files are in the 'terraform' directory

      # Step 5: Initialize Terraform
      - name: Terraform Init
        run: |
          cd terraform  # Navigate to the Terraform directory
          terraform init
          terraform plan
          terraform apply -auto-approve
          terraform output
